#include "headers.h"
#include "MatrixTemplate.cpp"
#include "MatrixFactory.cpp"
#include "MatrixFactoryType.cpp"
#include "Utils.h"

int main(){
    Utils utils;
    int rows,columns;
    std::string mType, mName;

    utils.matrixInfo();

    std::cout <<"Enter number of rows: "; std::cin >> rows;
    std::cout << "Enter number of columns: "; std::cin >> columns;
    std::cout << "Enter matrix type (int, float,double): "; std::cin >> mType;
    std::cout << "Enter matrix name: "; std::cin >> mName; /*std::getline(std::cin, mName);*/
    std::cout << std::endl;

    if(mType.compare("int") == 0) {
        MatrixFactory<int> *matrixFactory = new MatrixFactoryType<int>();
        MatrixTemplate<int> *firstMatrix = matrixFactory->selectMatrixType(rows, columns);
        MatrixTemplate<int>* autoGeneratedMatrix = new SquareMatrix<int>(3,3);
        autoGeneratedMatrix->setMatrixName("AUTO GENERATED MATRIX");
        utils.clearScreen();
        utils.fillMatrix();
        int choice;
        std::cout << "\tEnter your choice: "; std::cin >> choice;
        switch (choice) {
            case 0:
                std::cout << "\nTODO 0 VALUES MATRIX" << std::endl;
                break;
            case 1:
                std::cout << "\nMatrix will be now filled with random values..." << std::endl;
                break;
            case 2:
                utils.line();
                firstMatrix->manualInsertValues();
                break;
            case 3:
                std::cout << "\nTODO ORDE INCRAEMENTED MATRIX" << std::endl;
                break;
            default:
                std::cout << "\nDefault selection option" << std::endl;
                break;
        }
        int opt;
        utils.clearScreen();
        utils.optionsScreen();
        std::cout << "\tEnter your choice: "; std::cin >> opt;
        if(opt == 0){
            firstMatrix->printMatrix(mName);
            autoGeneratedMatrix->printMatrix();
        }else{
            std::cout << "Under construction." << std::endl;
        }
    }

    utils.clearScreen();
    return 0;
}










































/*
void cls();
void lines();
void availableOperationsScreen();

int main() {
    int rows,columns;
    std::string choice;
    std::cout << "1) Random value matrix: " << std::endl;
    std::cout << "2) Manual value matrix: " << std::endl;
    std::cout << "\t\tMake your choice: "; std::cin >> choice;
    std::cout << std::endl;

    std::cout << "Insert matrix rows: "; std::cin >> rows;
    std::cout << "Insert matrix columns: "; std::cin >> columns;
    MatrixTemplate<int> matrixTemplate(rows, columns);

    if(choice.compare("1") == 0) {
        std::cout << "Random matrix initialized!" << std::endl;
    }else if(choice.compare("2") == 0){
        matrixTemplate.manualInsertValues(matrixTemplate);
        matrixTemplate.printMatrix("YOUR MATRIX");
    }
    MatrixTemplate<int> autoGenerated(3,3);
    std::cin.get();
    cls();
    available:
    availableOperationsScreen();
    std::cout << "\t\tEnter your choice: "; std::cin >> choice;
    if(choice.compare("0") == 0){
        cls();
        std::cout << "AVAILABLE MATRIX" << std::endl;
        std::cout << "----------------" << std::endl;
        matrixTemplate.printMatrix("YOUR MATRIX");
        autoGenerated.printMatrix("AUTO GENERATED");
        std::cin.get();
        goto available;
    }else if(choice.compare("1") == 0){
        cls();
        MatrixTemplate<int> sumMatrix = matrixTemplate+autoGenerated;
        sumMatrix.printMatrix("SUM MATRIX");
        std::cin.get();
       goto available;
    }else if(choice.compare("2") == 0){
        cls();
        MatrixTemplate<int> subMatrix = matrixTemplate-autoGenerated;
        subMatrix.printMatrix("SUBTR MATRIX");
        std::cin.get();
        goto available;
    }
    std::cin.get();
    return 0;
}


void cls(){
    system("clear");
}
void lines(){
    std::cout  << std::endl << std::endl;
}
void availableOperationsScreen(){
    lines();
    //cls();
    std::cout << "\t\tAVAILABLE OPERATIONS" << std::endl;
    std::cout << "\t\t####################" << std::endl;
    std::cout << "0) Show Matrix" << std::endl;
    std::cout << "1) Add Matrix\t\t";
    std::cout << "2) Subtract Matrix" << std::endl;

    std::cout << "3) Multiply Matrix\t";
    std::cout << "4) Multiply Matrix with number" << std::endl;

    std::cout << "5) Divide Matrix\t";
    std::cout << "6) Divide Matrix with number" << std::endl;
    lines();
}
 */