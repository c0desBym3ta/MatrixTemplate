#include "headers.h"
#include "MatrixTemplate.cpp"
#include "MatrixFactory.cpp"
#include "MatrixFactoryType.cpp"
#include "Utils.h"

/*TODO fixing the id of list, making the exceptions, create function to print the list at utils class...*/

int main(){
    Utils utils;
    int rows,columns;
    std::string mType, mName, anws;
    utils.matrixInfo();
    std::list<MatrixTemplate<int>*> listOfMatrix;
    MatrixFactory<int> *matrixFactory = new MatrixFactoryType<int>();

    int i = 0;

   
    std::cout <<"Enter number of rows: "; std::cin >> rows;
    std::cout << "Enter number of columns: "; std::cin >> columns;
    std::cout << "Enter matrix type (int, float,double): "; std::cin >> mType;
    std::cout << "Enter matrix name: "; std::cin >> mName; /*std::getline(std::cin, mName);*/
    std::cout << std::endl;

    if(mType.compare("int") == 0) {
        MatrixFactory<int> *matrixFactory = new MatrixFactoryType<int>();
        MatrixTemplate<int> *firstMatrix = matrixFactory->selectMatrixType(rows, columns);
        MatrixTemplate<int>* autoGeneratedMatrix = new SquareMatrix<int>(3,3);
        autoGeneratedMatrix->setMatrixName("AUTO GENERATED");
        listOfMatrix.push_back(autoGeneratedMatrix);
        utils.clearScreen();
        utils.fillMatrix();
        int choice;
        std::cout << "\n\tEnter your choice: "; std::cin >> choice;
        switch (choice) {
            case 0:
                std::cout << "\nTODO 0 VALUES MATRIX" << std::endl;
                break;
            case 1:
                std::cout << "\nMatrix will be now filled with random values..." << std::endl;
                break;
            case 2:
                utils.line();
                firstMatrix->manualInsertValues();
                listOfMatrix.push_back(firstMatrix);
                break;
            case 3:
                std::cout << "\nTODO ORDE INCRAEMENTED MATRIX" << std::endl;
                break;
            default:
                std::cout << "\nDefault selection option" << std::endl;
                break;
        }
        int opt;
        utils.clearScreen();
        optionsScreen:
        utils.optionsScreen();
        std::cout << "\n\tEnter your choice: "; std::cin >> opt;
        if(opt == 0){
            //firstMatrix->printMatrix(mName);
            //autoGeneratedMatrix->printMatrix();
            for(std::list<MatrixTemplate<int>*>::iterator itr = listOfMatrix.begin(); itr != listOfMatrix.end(); ++itr) {
                std::cout << "\nMATRIX ID:{" << i<< "}";
                (*itr)->printMatrix();
                i++;
            }
            utils.clearScreen();
            goto optionsScreen;
        }else if(opt == 1) {
            MatrixTemplate<int>* prodMatrix = matrixFactory->selectMatrixType(1,1);
            *prodMatrix = (*firstMatrix)*(*autoGeneratedMatrix);
            prodMatrix->printMatrix("PRODUCT RESULT MATRIX");
            utils.line();
            std::cout << "Do you want to save this matrix: "; std::cin >> anws;
            if(anws.compare("yes") == 0) {
                listOfMatrix.push_back(prodMatrix);
                std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
                utils.clearScreen();
                goto optionsScreen;
            }
            else{
                utils.clearScreen();
                goto optionsScreen;
            }
        }else if(opt == 2){
            int mNum;
            std::cout << "\nSelect a number to multiply the following matrix." << std::endl;
            firstMatrix->printMatrix();
            std::cout << "\n\tEnter your choice: "; std::cin >> mNum;
            std::cout << "We are multiplying the matrix with the number " << mNum << "." << std::endl;
            std::cout << "Processing the request..." << std::endl;
            MatrixTemplate<int>* prodNumMatrix = matrixFactory->selectMatrixType(1,1);
            *prodNumMatrix = (*firstMatrix)*mNum;
            prodNumMatrix->printMatrix("MULTIPLIED MATRIX");
            utils.line();
            std::cout << "Do you want to save this matrix: "; std::cin >> anws;
            if(anws.compare("yes") == 0) {
                listOfMatrix.push_back(prodNumMatrix);
                std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
                utils.clearScreen();
                goto optionsScreen;
            }
            else{
                utils.clearScreen();
                goto optionsScreen;
            }
        }else if(opt == 3 ){
            MatrixTemplate<int>* divMatric = matrixFactory->selectMatrixType(1,1);
            *divMatric = (*firstMatrix)/(*autoGeneratedMatrix);
            divMatric->printMatrix("DIVIDING RESULT MATRIX");
            utils.line();
            std::cout << "Do you want to save this matrix: "; std::cin >> anws;
            if(anws.compare("yes") == 0) {
                listOfMatrix.push_back(divMatric);
                std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
                utils.clearScreen();
                goto optionsScreen;
            }
            else{
                utils.clearScreen();
                goto optionsScreen;
            }
        }else if(opt == 4){
            int dNum;
            std::cout << "\nSelect a number to divide the following matrix." << std::endl;
            firstMatrix->printMatrix();
            std::cout << "\n\tEnter your choice: "; std::cin >> dNum;
            std::cout << "We are dividing the matrix with the number " << dNum << "." << std::endl;
            std::cout << "Processing the request..." << std::endl;
            MatrixTemplate<int>* divMumMatrix = matrixFactory->selectMatrixType(1,1);
            *divMumMatrix = (*firstMatrix)/dNum;
            divMumMatrix->printMatrix("DIVIDED");
            utils.line();
            std::cout << "Do you want to save this matrix: "; std::cin >> anws;
            if(anws.compare("yes") == 0) {
                listOfMatrix.push_back(divMumMatrix);
                std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
                utils.clearScreen();
                goto optionsScreen;
            }
            else{
                utils.clearScreen();
                goto optionsScreen;
            }
        }else if(opt == 5){
            MatrixTemplate<int>* addMatrix = matrixFactory->selectMatrixType(1,1);
            *addMatrix = (*firstMatrix)+(*autoGeneratedMatrix);
            addMatrix->printMatrix("ADDITION RESULT");
            utils.line();
            std::cout << "Do you want to save this matrix: "; std::cin >> anws;
            if(anws.compare("yes") == 0) {
                listOfMatrix.push_back(addMatrix);
                std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
                utils.clearScreen();
                goto optionsScreen;
            }
            else{
                utils.clearScreen();
                goto optionsScreen;
            }
        }else if(opt == 6){
            MatrixTemplate<int>* subMatrix = matrixFactory->selectMatrixType(1,1);
            *subMatrix = (*firstMatrix)-(*autoGeneratedMatrix);
            subMatrix->printMatrix("SUBTRACTING RESULT");
            utils.line();
            std::cout << "Do you want to save this matrix: "; std::cin >> anws;
            if(anws.compare("yes") == 0) {
                listOfMatrix.push_back(subMatrix);
                std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
                utils.clearScreen();
                goto optionsScreen;
            }
            else{
                utils.clearScreen();
                goto optionsScreen;
            }
        }else if(opt == 7){
            int rNum;
            std::cout << "\nWhich row do you want to select from the following matrix.\n" << std::endl;
            firstMatrix->printMatrix();
            std::cout << std::endl;
            std::cout << "\n\tEnter your choice: "; std::cin >> rNum;
            std::cout << "The row number " << rNum << " is now selected." << std::endl;
            std::cout << "Processing the request..." << std::endl;
            MatrixTemplate<int>* rowMatrix = matrixFactory->selectMatrixType(1,1);
            *rowMatrix = (*firstMatrix).selectRow(rNum);
            rowMatrix->printMatrix("ROW");
            utils.line();
            std::cout << "Do you want to save this matrix: "; std::cin >> anws;
            if(anws.compare("yes") == 0) {
                listOfMatrix.push_back(rowMatrix);
                std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
                utils.clearScreen();
                goto optionsScreen;
            }
            else{
                utils.clearScreen();
                goto optionsScreen;
            }
        }else if(opt == 8){
            int cNum;
            std::cout << "\nWhich columns do you want to select from the following matrix.\n" << std::endl;
            firstMatrix->printMatrix();
            std::cout << std::endl;
            std::cout << "\n\tEnter your choice: "; std::cin >> cNum;
            std::cout << "The column number " << cNum << " is now selected." << std::endl;
            std::cout << "Processing the request..." << std::endl;
            MatrixTemplate<int>* columnMatrix = matrixFactory->selectMatrixType(1,1);
            *columnMatrix = (*firstMatrix).selectColumn(cNum);
            columnMatrix->printMatrix("COLUMN");
            utils.line();
            std::cout << "Do you want to save this matrix: "; std::cin >> anws;
            if(anws.compare("yes") == 0){
                listOfMatrix.push_back(columnMatrix);
                std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
                utils.clearScreen();
                goto optionsScreen;
            }
            else {
                utils.clearScreen();
                goto optionsScreen;
            }
        }else if(opt == 99){
            std::cout << "\nNow exiting form the program...";
            utils.clearScreen();
            return 0;
        }else{
                std::cout << "Under construction." << std::endl;
                utils.clearScreen();
                goto optionsScreen;
            }
    }
}











































/*
void cls();
void lines();
void availableOperationsScreen();

int main() {
    int rows,columns;
    std::string choice;
    std::cout << "1) Random value matrix: " << std::endl;
    std::cout << "2) Manual value matrix: " << std::endl;
    std::cout << "\t\tMake your choice: "; std::cin >> choice;
    std::cout << std::endl;

    std::cout << "Insert matrix rows: "; std::cin >> rows;
    std::cout << "Insert matrix columns: "; std::cin >> columns;
    MatrixTemplate<int> matrixTemplate(rows, columns);

    if(choice.compare("1") == 0) {
        std::cout << "Random matrix initialized!" << std::endl;
    }else if(choice.compare("2") == 0){
        matrixTemplate.manualInsertValues(matrixTemplate);
        matrixTemplate.printMatrix("YOUR MATRIX");
    }
    MatrixTemplate<int> autoGenerated(3,3);
    std::cin.get();
    cls();
    available:
    availableOperationsScreen();
    std::cout << "\t\tEnter your choice: "; std::cin >> choice;
    if(choice.compare("0") == 0){
        cls();
        std::cout << "AVAILABLE MATRIX" << std::endl;
        std::cout << "----------------" << std::endl;
        matrixTemplate.printMatrix("YOUR MATRIX");
        autoGenerated.printMatrix("AUTO GENERATED");
        std::cin.get();
        goto available;
    }else if(choice.compare("1") == 0){
        cls();
        MatrixTemplate<int> sumMatrix = matrixTemplate+autoGenerated;
        sumMatrix.printMatrix("SUM MATRIX");
        std::cin.get();
       goto available;
    }else if(choice.compare("2") == 0){
        cls();
        MatrixTemplate<int> subMatrix = matrixTemplate-autoGenerated;
        subMatrix.printMatrix("SUBTR MATRIX");
        std::cin.get();
        goto available;
    }
    std::cin.get();
    return 0;
}


void cls(){
    system("clear");
}
void lines(){
    std::cout  << std::endl << std::endl;
}
void availableOperationsScreen(){
    lines();
    //cls();
    std::cout << "\t\tAVAILABLE OPERATIONS" << std::endl;
    std::cout << "\t\t####################" << std::endl;
    std::cout << "0) Show Matrix" << std::endl;
    std::cout << "1) Add Matrix\t\t";
    std::cout << "2) Subtract Matrix" << std::endl;

    std::cout << "3) Multiply Matrix\t";
    std::cout << "4) Multiply Matrix with number" << std::endl;

    std::cout << "5) Divide Matrix\t";
    std::cout << "6) Divide Matrix with number" << std::endl;
    lines();
}
 */