#include "headers.h"
#include "MatrixTemplate.cpp"
#include "MatrixFactory.cpp"
#include "MatrixFactoryType.cpp"

int main(){
    MatrixFactory<int>* matrixFactory = new MatrixFactoryType<int>;

    MatrixTemplate<int>* rectangularMatrix = matrixFactory->selectMatrixType(3,2);
    MatrixTemplate<int>* squareMatrix = matrixFactory->selectMatrixType(3,3);

    rectangularMatrix->printMatrix();
    squareMatrix->printMatrix();
    
    return 0;
}











































/*
void cls();
void lines();
void availableOperationsScreen();

int main() {
    int rows,columns;
    std::string choice;
    std::cout << "1) Random value matrix: " << std::endl;
    std::cout << "2) Manual value matrix: " << std::endl;
    std::cout << "\t\tMake your choice: "; std::cin >> choice;
    std::cout << std::endl;

    std::cout << "Insert matrix rows: "; std::cin >> rows;
    std::cout << "Insert matrix columns: "; std::cin >> columns;
    MatrixTemplate<int> matrixTemplate(rows, columns);

    if(choice.compare("1") == 0) {
        std::cout << "Random matrix initialized!" << std::endl;
    }else if(choice.compare("2") == 0){
        matrixTemplate.manualInsertValues(matrixTemplate);
        matrixTemplate.printMatrix("YOUR MATRIX");
    }
    MatrixTemplate<int> autoGenerated(3,3);
    std::cin.get();
    cls();
    available:
    availableOperationsScreen();
    std::cout << "\t\tEnter your choice: "; std::cin >> choice;
    if(choice.compare("0") == 0){
        cls();
        std::cout << "AVAILABLE MATRIX" << std::endl;
        std::cout << "----------------" << std::endl;
        matrixTemplate.printMatrix("YOUR MATRIX");
        autoGenerated.printMatrix("AUTO GENERATED");
        std::cin.get();
        goto available;
    }else if(choice.compare("1") == 0){
        cls();
        MatrixTemplate<int> sumMatrix = matrixTemplate+autoGenerated;
        sumMatrix.printMatrix("SUM MATRIX");
        std::cin.get();
       goto available;
    }else if(choice.compare("2") == 0){
        cls();
        MatrixTemplate<int> subMatrix = matrixTemplate-autoGenerated;
        subMatrix.printMatrix("SUBTR MATRIX");
        std::cin.get();
        goto available;
    }
    std::cin.get();
    return 0;
}


void cls(){
    system("clear");
}
void lines(){
    std::cout  << std::endl << std::endl;
}
void availableOperationsScreen(){
    lines();
    //cls();
    std::cout << "\t\tAVAILABLE OPERATIONS" << std::endl;
    std::cout << "\t\t####################" << std::endl;
    std::cout << "0) Show Matrix" << std::endl;
    std::cout << "1) Add Matrix\t\t";
    std::cout << "2) Subtract Matrix" << std::endl;

    std::cout << "3) Multiply Matrix\t";
    std::cout << "4) Multiply Matrix with number" << std::endl;

    std::cout << "5) Divide Matrix\t";
    std::cout << "6) Divide Matrix with number" << std::endl;
    lines();
}
 */