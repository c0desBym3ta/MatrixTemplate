#include "headers.h"
#include "MatrixTemplate.cpp"
#include "MatrixFactory.cpp"
#include "MatrixFactoryType.cpp"
#include "Utils.h"
#include "MatrixUtils.cpp"



/*TODO fixing the id of list, making the exceptions...*/

int intMatrix();
void floatMatrix();

int main(){
    std::string mType;
    std::cout << "Enter matrix type (int, float,double): "; std::cin >> mType;

    if(mType.compare("int") == 0)
        intMatrix();
    else if(mType.compare("float") == 0)
        floatMatrix();

    return 0;

}

void floatMatrix(){
    std::cout << "Under construction" << std::endl;
}

int intMatrix(){
    Utils utils;
    int rows,columns;
    std::string mName, anws;
    MatrixUtils<int> matrixUtils;

    std::list<MatrixTemplate<int>*> listOfMatrix;
    MatrixFactory<int>* matrixFactory = new MatrixFactoryType<int>();

    utils.matrixInfo();

    anotherMatrix:
    std::cout <<"Enter number of rows: "; std::cin >> rows;
    std::cout << "Enter number of columns: "; std::cin >> columns;
    std::cout << "Enter matrix name: "; std::cin >> mName; /*std::getline(std::cin, mName);*/
    std::cout << std::endl;

    utils.clearScreen();
    utils.fillMatrix();
    int choice;
    std::cout << "\n\tEnter your choice: "; std::cin >> choice;
    if(choice == 0){
        utils.line();
        MatrixTemplate<int>* zeroMatrix = matrixFactory->selectMatrixType(rows,columns);
        zeroMatrix->setMatrixName("ZERO GENERATED");
        std::cout << "\nMatrix will be now initialized with 0..." << std::endl;
        zeroMatrix->matrixOfZeros();
        std::cout << "\nInsert to matrix list (yes,no): "; std::cin >> anws;
        if(anws.compare("yes") == 0) {
            listOfMatrix.push_back(zeroMatrix);
        }else{

        }
    }else if(choice == 1){
        utils.line();
        MatrixTemplate<int>* randomMatrix = matrixFactory->selectMatrixType(rows,columns);
        randomMatrix->setMatrixName("RANDOM GENERATED");
        std::cout << "\nMatrix will be now filled with random values..." << std::endl;
        randomMatrix->randomMatrix();
        listOfMatrix.push_back(randomMatrix);
    }else if(choice == 2){
        utils.line();
        MatrixTemplate<int>* manualMatrix = matrixFactory->selectMatrixType(rows,columns);
        manualMatrix->setMatrixName(mName);
        manualMatrix->manualInsertValues();
        std::cout << "\nInserting your values to the matrix..." << std::endl;
        listOfMatrix.push_back(manualMatrix);
    }else if(choice == 3){
        utils.line();
        MatrixTemplate<int>* seqMatrix = matrixFactory->selectMatrixType(rows,columns);
        seqMatrix->setMatrixName("SEQUENCE");
        std::cout << "\nInserting values of matrix in sequence..." << std::endl;
        seqMatrix->sequenceMatrix();
        listOfMatrix.push_back(seqMatrix);
    }else{
        std::cout << "\nDefault selection option" << std::endl;
    }


    int opt;
    utils.clearScreen();
    optionsScreen:
    utils.optionsScreen();
    std::cout << "\n\tEnter your choice: "; std::cin >> opt;
    if(opt == 0){
        utils.clearScreen();
        goto anotherMatrix;
    }else if(opt == 1){
        matrixUtils.printListOfMatrix(listOfMatrix);
        utils.clearScreen();
        goto optionsScreen;
    }else if(opt == 2) {
        MatrixTemplate<int>* prodMatrix = matrixFactory->selectMatrixType(1,1);
        //*prodMatrix = (*firstMatrix)*(*autoGeneratedMatrix);
        prodMatrix->setMatrixName("PRODUCT RESULT");
        prodMatrix->printMatrix(prodMatrix->getMatrixName());
        utils.line();
        std::cout << "Do you want to save this matrix: "; std::cin >> anws;
        if(anws.compare("yes") == 0) {
            listOfMatrix.push_back(prodMatrix);
            std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
            utils.clearScreen();
            goto optionsScreen;
        }else{
            utils.clearScreen();
            goto optionsScreen;
        }
    }else if(opt == 3){
        int mNum;
        std::cout << "\nSelect a number to multiply the following matrix." << std::endl;
       // firstMatrix->printMatrix();
        std::cout << "\n\tEnter your choice: "; std::cin >> mNum;
        std::cout << "We are multiplying the matrix with the number " << mNum << "." << std::endl;
        std::cout << "Processing the request..." << std::endl;
        MatrixTemplate<int>* prodNumMatrix = matrixFactory->selectMatrixType(1,1);
        //*prodNumMatrix = (*firstMatrix)*mNum;
        prodNumMatrix->setMatrixName("MULTIPLIED MATRIX");
        prodNumMatrix->printMatrix(prodNumMatrix->getMatrixName());
        utils.line();
        std::cout << "Do you want to save this matrix: "; std::cin >> anws;
        if(anws.compare("yes") == 0) {
            listOfMatrix.push_back(prodNumMatrix);
            std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
            utils.clearScreen();
            goto optionsScreen;
        }
        else{
            utils.clearScreen();
            goto optionsScreen;
        }
    }else if(opt == 4){
        MatrixTemplate<int>* divMatric = matrixFactory->selectMatrixType(1,1);
       // *divMatric = (*firstMatrix)/(*autoGeneratedMatrix);
        divMatric->setMatrixName("DIVIDING RESULT");
        divMatric->printMatrix(divMatric->getMatrixName());
        utils.line();
        std::cout << "Do you want to save this matrix: "; std::cin >> anws;
        if(anws.compare("yes") == 0) {
            listOfMatrix.push_back(divMatric);
            std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
            utils.clearScreen();
            goto optionsScreen;
        }
        else{
            utils.clearScreen();
            goto optionsScreen;
        }
    }else if(opt == 5){
        int dNum;
        std::cout << "\nSelect a number to divide the following matrix." << std::endl;
       // firstMatrix->printMatrix();
        std::cout << "\n\tEnter your choice: "; std::cin >> dNum;
        std::cout << "We are dividing the matrix with the number " << dNum << "." << std::endl;
        std::cout << "Processing the request..." << std::endl;
        MatrixTemplate<int>* divNumMatrix = matrixFactory->selectMatrixType(1,1);
        //*divNumMatrix = (*firstMatrix)/dNum;
        divNumMatrix->printMatrix("DIVIDED");
        divNumMatrix->printMatrix(divNumMatrix->getMatrixName());
        utils.line();
        std::cout << "Do you want to save this matrix: "; std::cin >> anws;
        if(anws.compare("yes") == 0) {
            listOfMatrix.push_back(divNumMatrix);
            std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
            utils.clearScreen();
            goto optionsScreen;
        }else{
            utils.clearScreen();
            goto optionsScreen;
        }
    }else if(opt == 6){
        MatrixTemplate<int>* addMatrix = matrixFactory->selectMatrixType(1,1);
        //*addMatrix = (*firstMatrix)+(*autoGeneratedMatrix);
        addMatrix->setMatrixName("ADDITION RESULT");
        addMatrix->printMatrix(addMatrix->getMatrixName());
        utils.line();
        std::cout << "Do you want to save this matrix: "; std::cin >> anws;
        if(anws.compare("yes") == 0) {
            listOfMatrix.push_back(addMatrix);
            std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
            utils.clearScreen();
            goto optionsScreen;
        }else{
            utils.clearScreen();
            goto optionsScreen;
        }
    }else if(opt == 7){
        MatrixTemplate<int>* subMatrix = matrixFactory->selectMatrixType(1,1);
        //*subMatrix = (*firstMatrix)-(*autoGeneratedMatrix);
        subMatrix->setMatrixName("SUBTRACTING RESULT");
        subMatrix->printMatrix(subMatrix->getMatrixName());
        utils.line();
        std::cout << "Do you want to save this matrix: "; std::cin >> anws;
        if(anws.compare("yes") == 0) {
            listOfMatrix.push_back(subMatrix);
            std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
            utils.clearScreen();
            goto optionsScreen;
        }else{
            utils.clearScreen();
            goto optionsScreen;
        }
    }else if(opt == 8){
        int rNum;
        std::cout << "\nWhich row do you want to select from the following matrix.\n" << std::endl;
        //firstMatrix->printMatrix();
        std::cout << std::endl;
        std::cout << "\n\tEnter your choice: "; std::cin >> rNum;
        std::cout << "The row number " << rNum << " is now selected." << std::endl;
        std::cout << "Processing the request..." << std::endl;
        MatrixTemplate<int>* rowMatrix = matrixFactory->selectMatrixType(1,1);
        //*rowMatrix = (*firstMatrix).selectRow(rNum);
        rowMatrix->setMatrixName("ROW");
        rowMatrix->printMatrix(rowMatrix->getMatrixName());
        utils.line();
        std::cout << "Do you want to save this matrix: "; std::cin >> anws;
        if(anws.compare("yes") == 0) {
            listOfMatrix.push_back(rowMatrix);
            std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
            utils.clearScreen();
            goto optionsScreen;
        }else{
            utils.clearScreen();
            goto optionsScreen;
        }
    }else if(opt == 9){
        int cNum;
        std::cout << "\nWhich columns do you want to select from the following matrix.\n" << std::endl;
       // firstMatrix->printMatrix();
        std::cout << std::endl;
        std::cout << "\n\tEnter your choice: "; std::cin >> cNum;
        std::cout << "The column number " << cNum << " is now selected." << std::endl;
        std::cout << "Processing the request..." << std::endl;
        MatrixTemplate<int>* columnMatrix = matrixFactory->selectMatrixType(1,1);
       // *columnMatrix = (*firstMatrix).selectColumn(cNum);
        columnMatrix->setMatrixName("COLUMN");
        columnMatrix->printMatrix(columnMatrix->getMatrixName());
        utils.line();
        std::cout << "Do you want to save this matrix: "; std::cin >> anws;
        if(anws.compare("yes") == 0){
            listOfMatrix.push_back(columnMatrix);
            std::cout << "\n\nThe matrix is now saved to your list!" << std::endl;
            utils.clearScreen();
            goto optionsScreen;
        }else {
            utils.clearScreen();
            goto optionsScreen;
        }
    }else if(opt == 99){
        std::cout << "\nNow exiting form the program...";
        utils.clearScreen();
        return 0;
    }else{
    std::cout << "Under construction." << std::endl;
    utils.clearScreen();
    goto optionsScreen;
    }

}